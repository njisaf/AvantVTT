name: AvantVTT Release (Slopcore)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      skip_tests:
        description: "Skip tests (emergency release only)"
        required: false
        default: false
        type: boolean

env:
  SYSTEM_ID: avant
  NODE_VERSION: 20
  LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
  LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout AvantVTT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Slopcore
        uses: actions/checkout@v4
        with:
          repository: njisaf/slopcore
          path: .slopcore
          token: ${{ secrets.SLOPCORE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Slopcore dependencies
        working-directory: .slopcore
        run: |
          npm install -g pnpm
          pnpm install

      - name: Install AvantVTT dependencies
        run: npm ci

      - name: Run tests (unless skipped)
        if: ${{ !github.event.inputs.skip_tests }}
        run: |
          npm run lint
          npm test -- --coverage --watchAll=false

      - name: Run release via Slopcore
        working-directory: .slopcore
        run: |
          pnpm slop release \
            --system ${{ env.SYSTEM_ID }} \
            --type ${{ github.event.inputs.release_type }} \
            --source-path ../ \
            --target-repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release information
        id: release_info
        working-directory: .slopcore
        run: |
          RELEASE_VERSION=$(cat release_output.json | jq -r '.version')
          RELEASE_URL=$(cat release_output.json | jq -r '.url')
          RELEASE_NOTES=$(cat release_output.json | jq -r '.notes')

          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and publish Docker image
        working-directory: .slopcore
        run: |
          pnpm mcp run build-image \
            --system ${{ env.SYSTEM_ID }} \
            --version ${{ steps.release_info.outputs.version }} \
            --source-path ../
            
          pnpm mcp run publish-image \
            --system ${{ env.SYSTEM_ID }} \
            --version ${{ steps.release_info.outputs.version }}
        env:
          DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Deploy to production
        working-directory: .slopcore
        run: |
          pnpm mcp run deploy-image \
            --system ${{ env.SYSTEM_ID }} \
            --version ${{ steps.release_info.outputs.version }} \
            --environment production \
            --health-check true

      - name: Wait for deployment health check
        working-directory: .slopcore
        run: |
          timeout 300 bash -c 'until pnpm mcp run health-check --system ${{ env.SYSTEM_ID }}; do sleep 10; done'

      - name: Log release to Langfuse
        working-directory: .slopcore
        run: |
          node -e "
          const { langfuse } = require('./packages/devbot/src/langfuse');
          langfuse.trace({
            name: 'AvantVTT.Release',
            input: { 
              system: '${{ env.SYSTEM_ID }}',
              releaseType: '${{ github.event.inputs.release_type }}',
              version: '${{ steps.release_info.outputs.version }}',
              skipTests: ${{ github.event.inputs.skip_tests }},
              triggeredBy: '${{ github.actor }}'
            },
            output: { 
              success: true,
              version: '${{ steps.release_info.outputs.version }}',
              releaseUrl: '${{ steps.release_info.outputs.url }}',
              duration: process.env.DURATION
            },
            sessionId: '${{ github.run_id }}'
          });
          "
        env:
          DURATION: ${{ job.steps.*.conclusion }}

      - name: Notify release completion
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');

            // Create release announcement issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Release ${{ steps.release_info.outputs.version }} Published`,
              body: `## Release Information\n\n` +
                    `**Version:** \`${{ steps.release_info.outputs.version }}\`\n` +
                    `**Type:** \`${{ github.event.inputs.release_type }}\`\n` +
                    `**Released by:** @${{ github.actor }}\n` +
                    `**Release URL:** ${{ steps.release_info.outputs.url }}\n\n` +
                    `## Release Notes\n\n${{ steps.release_info.outputs.notes }}\n\n` +
                    `## Deployment Status\n\n` +
                    `âœ… Production deployment successful\n` +
                    `âœ… Health checks passing\n` +
                    `âœ… Docker image published\n\n` +
                    `---\n*This release was automated via Slopcore*`,
              labels: ['release', 'automated']
            });

      - name: Rollback on failure
        if: failure()
        working-directory: .slopcore
        run: |
          echo "Release failed, attempting rollback..."
          pnpm mcp run rollback \
            --system ${{ env.SYSTEM_ID }} \
            --validate-health true

      - name: Log failure to Langfuse
        if: failure()
        working-directory: .slopcore
        run: |
          node -e "
          const { langfuse } = require('./packages/devbot/src/langfuse');
          langfuse.trace({
            name: 'AvantVTT.Release.Failed',
            input: { 
              system: '${{ env.SYSTEM_ID }}',
              releaseType: '${{ github.event.inputs.release_type }}',
              triggeredBy: '${{ github.actor }}'
            },
            output: { 
              success: false,
              error: 'Release workflow failed',
              rollbackAttempted: true
            },
            sessionId: '${{ github.run_id }}'
          });
          "
