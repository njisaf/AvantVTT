name: CI - AvantVTT with Deprecation Guards

# === TEMPORARY DISABLE ===
# The Phase-4 Deprecation Guard workflow is noisy right now.
# Convert it to manual-only until we revisit it.
on:
  workflow_dispatch:
# === END TEMPORARY DISABLE ===

env:
  NODE_VERSION: "18"
  
jobs:
  lint-and-guard:
    runs-on: ubuntu-latest
    name: "Phase 4: Deprecation Guards & Linting"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for change detection

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Phase 4 Guard - Check deprecated folder modifications
        if: false  # Disabled per team decision
        run: |
          echo "üîç Phase 4: Checking for deprecated folder modifications..."
          
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            # For push events, check last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for deprecated folder edits
          DEPRECATED_CHANGES=$(echo "$CHANGED_FILES" | grep "^deprecated/remote-trait-service/" || true)
          
          if [ -n "$DEPRECATED_CHANGES" ]; then
            echo "‚ùå PHASE 4 GUARD VIOLATION: Detected changes to deprecated folder"
            echo "Modified deprecated files:"
            echo "$DEPRECATED_CHANGES"
            echo ""
            echo "üîß To edit deprecated files intentionally, include 'restore-remote-trait-service' in your commit message"
            echo "üìñ See deprecated/remote-trait-service/README.md for restoration procedures"
            
            # Check commit messages for restoration keyword
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              COMMIT_MESSAGES=$(git log --pretty=format:"%s" origin/${{ github.base_ref }}...HEAD)
            else
              COMMIT_MESSAGES=$(git log --pretty=format:"%s" HEAD~1...HEAD)
            fi
            
            if echo "$COMMIT_MESSAGES" | grep -q "restore-remote-trait-service"; then
              echo "‚úÖ Found restoration keyword in commit message - allowing edit"
            else
              echo "‚ùå No restoration keyword found - blocking edit"
              exit 1
            fi
          else
            echo "‚úÖ No deprecated folder modifications detected"
          fi

      - name: Phase 4 Guard - Check for RemoteTraitService imports
        if: false  # Disabled per team decision
        run: |
          echo "üîç Phase 4: Scanning for RemoteTraitService imports in active code..."
          
          # Scan all TypeScript and JavaScript files outside deprecated folder
          IMPORT_VIOLATIONS=$(find scripts/ -name "*.ts" -o -name "*.js" | xargs grep -l "RemoteTraitService" || true)
          
          if [ -n "$IMPORT_VIOLATIONS" ]; then
            echo "‚ùå PHASE 4 GUARD VIOLATION: Found RemoteTraitService imports in active code"
            echo "Files with violations:"
            echo "$IMPORT_VIOLATIONS"
            echo ""
            echo "üîß RemoteTraitService is deprecated. See deprecated/remote-trait-service/README.md"
            echo "üìñ Use alternative trait management approaches or restore service intentionally"
            exit 1
          else
            echo "‚úÖ No RemoteTraitService imports found in active code"
          fi

      - name: Run dead-code scan
        run: |
          echo "üîç Phase 4: Running automated dead-code scan..."
          npm run lint:deadcode || {
            echo "‚ùå Dead code scan failed - found unused dependencies or imports"
            echo "üîß Run 'npm run lint:deadcode' locally to see details"
            exit 1
          }
          echo "‚úÖ Dead-code scan passed"

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          npm run lint
          echo "‚úÖ ESLint passed"

  test:
    runs-on: ubuntu-latest
    needs: lint-and-guard
    name: "Test Suite"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          npm test
          echo "‚úÖ Tests passed"

      - name: Check test coverage
        run: |
          echo "üìä Checking test coverage thresholds..."
          # Coverage is reported by Jest based on jest.config.js thresholds
          echo "‚úÖ Coverage check completed"

  build:
    runs-on: ubuntu-latest
    needs: test
    name: "Build & Validate"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build system
        run: |
          echo "üèóÔ∏è Building AvantVTT system..."
          npm run build
          echo "‚úÖ Build completed"

      - name: Validate distribution package
        run: |
          echo "üîç Validating dist/ package..."
          
          # Check that dist/ was created
          if [ ! -d "dist" ]; then
            echo "‚ùå dist/ directory not created"
            exit 1
          fi
          
          # Check for RemoteTraitService references in dist/
          DIST_VIOLATIONS=$(find dist/ -name "*.js" | xargs grep -l "RemoteTraitService" || true)
          
          if [ -n "$DIST_VIOLATIONS" ]; then
            echo "‚ùå PHASE 4 VIOLATION: Found RemoteTraitService references in dist/"
            echo "Files with violations:"
            echo "$DIST_VIOLATIONS"
            exit 1
          else
            echo "‚úÖ No RemoteTraitService references in dist/ package"
          fi
          
          echo "‚úÖ Distribution package validation passed"

      - name: Phase 4 completion check
        if: false  # Disabled since guards are off
        run: |
          echo "üéØ Phase 4: Deprecation guards successfully enforced"
          echo ""
          echo "‚úÖ Phase 4 Achievements:"
          echo "  üîí CI guards prevent deprecated folder edits without keyword"
          echo "  üîç Automated scanning prevents RemoteTraitService re-imports"
          echo "  üßπ Dead-code detection integrated into pipeline"
          echo "  üì¶ Distribution package verified clean of deprecated references"
          echo "  üöÄ Build and test pipeline successful"
          echo ""
          echo "üìã Next: Phase 5 - Long-term monitoring and policy enforcement"

  weekly-guard-monitor:
    # This job runs weekly to monitor guard integrity
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    name: "Weekly: Guard Integrity Monitor"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Monitor guard integrity
        run: |
          echo "üìä Weekly Guard Integrity Monitor"
          echo "================================"
          
          # Check pre-commit hook exists
          if [ -f ".git/hooks/pre-commit" ]; then
            echo "‚úÖ Pre-commit hook exists"
          else
            echo "‚ö†Ô∏è Pre-commit hook missing"
          fi
          
          # Run dead-code scan
          echo "üîç Running weekly dead-code scan..."
          npm run lint:deadcode
          
          # Check deprecated folder size
          DEPRECATED_SIZE=$(du -sh deprecated/ | cut -f1)
          echo "üì¶ Deprecated folder size: $DEPRECATED_SIZE"
          
          # Count files in deprecated folder
          DEPRECATED_FILES=$(find deprecated/ -type f | wc -l)
          echo "üìÑ Deprecated files count: $DEPRECATED_FILES"
          
          echo "‚úÖ Weekly monitoring completed" 