/**\n * @fileoverview Integration Tests - Item Card Rendering\n * @description Tests for complete card rendering with templates and data\n * @version 0.1.0\n * @author Avant Development Team\n */\n\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { JSDOM } from 'jsdom';\nimport { getAugmentCardLayout, getTalentCardLayout } from '../../../../scripts/layout/item-card/index.js';\n\n// Mock FoundryVTT environment\nconst dom = new JSDOM('<!DOCTYPE html><html><body></body></html>');\nglobal.document = dom.window.document;\nglobal.window = dom.window;\n\ndescribe('Item Card Rendering Integration', () => {\n    \n    let mockAugmentItem, mockTalentItem;\n    \n    beforeEach(() => {\n        // Mock augment item data\n        mockAugmentItem = {\n            _id: 'test-augment-1',\n            type: 'augment',\n            name: 'Neural Booster',\n            img: 'icons/svg/augment.svg',\n            system: {\n                description: 'Enhances cognitive functions',\n                traits: ['cybernetic', 'neural'],\n                apCost: 2,\n                ppCost: 1,\n                levelRequirement: 3,\n                uses: { value: 2, max: 3 },\n                augmentType: 'neural',\n                powerPointCost: 1,\n                isActive: false,\n                rarity: 'uncommon',\n                requirements: 'Level 3+'\n            }\n        };\n        \n        // Mock talent item data\n        mockTalentItem = {\n            _id: 'test-talent-1',\n            type: 'talent',\n            name: 'Combat Expertise',\n            img: 'icons/svg/talent.svg',\n            system: {\n                description: 'Provides combat bonuses',\n                traits: ['combat', 'expertise'],\n                apCost: 1,\n                levelRequirement: 2,\n                tier: 2,\n                requirements: 'Combat training',\n                prerequisites: 'Basic Combat',\n                uses: { value: 1, max: 1 },\n                isActive: true\n            }\n        };\n    });\n    \n    describe('Augment Card Layout Generation', () => {\n        it('should generate complete three-zone layout for augment', () => {\n            const layout = getAugmentCardLayout(mockAugmentItem);\n            \n            // Verify structure\n            expect(layout).toHaveProperty('left');\n            expect(layout).toHaveProperty('center');\n            expect(layout).toHaveProperty('right');\n            \n            // Left zone should have roll button + icon\n            expect(layout.left).toHaveLength(2);\n            expect(layout.left[0]).toMatchObject({\n                type: 'button',\n                buttonType: 'roll',\n                action: 'augment-activate',\n                label: 'Activate'\n            });\n            \n            // Right zone should have all controls\n            expect(layout.right).toHaveLength(3);\n            expect(layout.right.map(btn => btn.buttonType)).toEqual(['edit', 'delete', 'drag']);\n        });\n        \n        it('should include relevant fields in center zone for augment', () => {\n            const layout = getAugmentCardLayout(mockAugmentItem);\n            \n            // Should have name field\n            const nameField = layout.center.find(f => f.name === 'name');\n            expect(nameField).toBeDefined();\n            expect(nameField.value).toBe('Neural Booster');\n            \n            // Should have uses counter (since max > 0)\n            const usesField = layout.center.find(f => f.name === 'system.uses');\n            expect(usesField).toBeDefined();\n            expect(usesField.type).toBe('uses-counter');\n            \n            // Should have augment type badge\n            const typeField = layout.center.find(f => f.name === 'augmentType');\n            expect(typeField).toBeDefined();\n            expect(typeField.value).toBe('neural');\n        });\n        \n        it('should handle augment with only AP cost', () => {\n            const augmentNoPP = {\n                ...mockAugmentItem,\n                system: {\n                    ...mockAugmentItem.system,\n                    ppCost: undefined\n                }\n            };\n            \n            const layout = getAugmentCardLayout(augmentNoPP);\n            \n            // Should find single AP cost field, not side-by-side\n            const apField = layout.center.find(f => f.type === 'ap-selector');\n            expect(apField).toBeDefined();\n        });\n        \n        it('should handle augment with no uses', () => {\n            const augmentNoUses = {\n                ...mockAugmentItem,\n                system: {\n                    ...mockAugmentItem.system,\n                    uses: { value: 0, max: 0 }\n                }\n            };\n            \n            const layout = getAugmentCardLayout(augmentNoUses);\n            \n            // Should not include uses counter\n            const usesField = layout.center.find(f => f.name === 'system.uses');\n            expect(usesField).toBeUndefined();\n        });\n    });\n    \n    describe('Talent Card Layout Generation', () => {\n        it('should generate complete three-zone layout for talent', () => {\n            const layout = getTalentCardLayout(mockTalentItem);\n            \n            // Verify structure\n            expect(layout).toHaveProperty('left');\n            expect(layout).toHaveProperty('center');\n            expect(layout).toHaveProperty('right');\n            \n            // Left zone should have roll button + icon\n            expect(layout.left).toHaveLength(2);\n            expect(layout.left[0]).toMatchObject({\n                type: 'button',\n                buttonType: 'roll',\n                action: 'talent-roll',\n                label: 'Use Talent'\n            });\n        });\n        \n        it('should include relevant fields in center zone for talent', () => {\n            const layout = getTalentCardLayout(mockTalentItem);\n            \n            // Should have name field\n            const nameField = layout.center.find(f => f.name === 'name');\n            expect(nameField).toBeDefined();\n            expect(nameField.value).toBe('Combat Expertise');\n            \n            // Should have level requirement (since > 1)\n            const levelField = layout.center.find(f => f.name === 'levelRequirement');\n            expect(levelField).toBeDefined();\n            expect(levelField.value).toBe('Level 2+');\n            \n            // Should have active state indicator\n            const activeField = layout.center.find(f => f.name === 'activeState');\n            expect(activeField).toBeDefined();\n            expect(activeField.value).toBe('Active');\n        });\n        \n        it('should handle talent with no tier', () => {\n            const talentNoTier = {\n                ...mockTalentItem,\n                system: {\n                    ...mockTalentItem.system,\n                    tier: undefined\n                }\n            };\n            \n            const layout = getTalentCardLayout(talentNoTier);\n            \n            // Should still work but without tier display\n            expect(layout.center.length).toBeGreaterThan(0);\n        });\n        \n        it('should not show level requirement for level 1', () => {\n            const talentLevel1 = {\n                ...mockTalentItem,\n                system: {\n                    ...mockTalentItem.system,\n                    levelRequirement: 1\n                }\n            };\n            \n            const layout = getTalentCardLayout(talentLevel1);\n            \n            // Should not include level requirement field\n            const levelField = layout.center.find(f => f.name === 'levelRequirement');\n            expect(levelField).toBeUndefined();\n        });\n        \n        it('should not show active indicator when inactive', () => {\n            const talentInactive = {\n                ...mockTalentItem,\n                system: {\n                    ...mockTalentItem.system,\n                    isActive: false\n                }\n            };\n            \n            const layout = getTalentCardLayout(talentInactive);\n            \n            // Should not include active state field\n            const activeField = layout.center.find(f => f.name === 'activeState');\n            expect(activeField).toBeUndefined();\n        });\n    });\n    \n    describe('Card Template Data Structure', () => {\n        it('should produce template-compatible data structure', () => {\n            const layout = getAugmentCardLayout(mockAugmentItem);\n            \n            // Check that all fields have required template properties\n            [...layout.left, ...layout.center, ...layout.right].forEach(field => {\n                expect(field).toHaveProperty('type');\n                expect(field).toHaveProperty('name');\n                expect(typeof field.type).toBe('string');\n                expect(typeof field.name).toBe('string');\n            });\n        });\n        \n        it('should include CSS classes for styling', () => {\n            const layout = getAugmentCardLayout(mockAugmentItem);\n            \n            // Check that buttons have appropriate classes\n            layout.left.concat(layout.right).forEach(field => {\n                if (field.type === 'button') {\n                    expect(field).toHaveProperty('class');\n                    expect(typeof field.class).toBe('string');\n                }\n            });\n        });\n        \n        it('should include proper action attributes for buttons', () => {\n            const layout = getTalentCardLayout(mockTalentItem);\n            \n            // Check roll button\n            const rollButton = layout.left.find(f => f.buttonType === 'roll');\n            expect(rollButton.action).toBe('talent-roll');\n            \n            // Check control buttons\n            const editButton = layout.right.find(f => f.buttonType === 'edit');\n            expect(editButton.action).toBe('edit-item');\n            \n            const deleteButton = layout.right.find(f => f.buttonType === 'delete');\n            expect(deleteButton.action).toBe('delete-item');\n        });\n    });\n    \n    describe('Error Handling', () => {\n        it('should handle missing system data gracefully', () => {\n            const itemNoSystem = {\n                ...mockAugmentItem,\n                system: {}\n            };\n            \n            expect(() => getAugmentCardLayout(itemNoSystem)).not.toThrow();\n            const layout = getAugmentCardLayout(itemNoSystem);\n            expect(layout).toHaveProperty('left');\n            expect(layout).toHaveProperty('center');\n            expect(layout).toHaveProperty('right');\n        });\n        \n        it('should handle null/undefined item properties', () => {\n            const itemNullProps = {\n                ...mockTalentItem,\n                name: null,\n                img: undefined,\n                system: {\n                    ...mockTalentItem.system,\n                    description: null,\n                    traits: undefined\n                }\n            };\n            \n            expect(() => getTalentCardLayout(itemNullProps)).not.toThrow();\n        });\n    });\n});"}]