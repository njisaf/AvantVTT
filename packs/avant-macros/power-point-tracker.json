{
  "name": "Power Point Tracker",
  "type": "script",
  "scope": "global",
  "command": "/**\n * Power Point Tracker Macro\n * Manage power points for selected tokens\n */\n\nconst tokens = canvas.tokens.controlled;\n\nif (tokens.length === 0) {\n  ui.notifications.warn('Please select at least one token.');\n  return;\n}\n\n// Show power point management dialog\nconst action = await new Promise((resolve) => {\n  new Dialog({\n    title: 'Power Point Management',\n    content: `\n      <div style=\"padding: 15px;\">\n        <h3>Manage Power Points</h3>\n        <p>Selected tokens: ${tokens.length}</p>\n        <div style=\"margin: 15px 0;\">\n          <label for=\"pp-amount\">Amount:</label>\n          <input type=\"number\" id=\"pp-amount\" min=\"1\" max=\"20\" value=\"1\" style=\"width: 60px; margin-left: 10px;\">\n        </div>\n        <div style=\"margin: 15px 0;\">\n          <label><input type=\"radio\" name=\"pp-action\" value=\"spend\" checked> Spend Power Points</label><br>\n          <label><input type=\"radio\" name=\"pp-action\" value=\"restore\"> Restore Power Points</label><br>\n          <label><input type=\"radio\" name=\"pp-action\" value=\"set\"> Set Power Points</label>\n        </div>\n      </div>\n    `,\n    buttons: {\n      apply: {\n        label: 'Apply',\n        callback: (html) => {\n          const amount = parseInt(html.find('#pp-amount').val()) || 1;\n          const action = html.find('input[name=\"pp-action\"]:checked').val();\n          resolve({ action, amount });\n        }\n      },\n      cancel: {\n        label: 'Cancel',\n        callback: () => resolve(null)\n      }\n    },\n    default: 'apply'\n  }).render(true);\n});\n\nif (action === null) return;\n\nconsole.log(`⚡ ${action.action} ${action.amount} power points for ${tokens.length} token(s)...`);\n\nlet processedCount = 0;\n\nfor (const token of tokens) {\n  if (token.actor) {\n    try {\n      const currentPP = token.actor.system.powerPoints?.value || 0;\n      const maxPP = token.actor.system.powerPoints?.max || 10;\n      let newPP;\n      \n      switch (action.action) {\n        case 'spend':\n          newPP = Math.max(0, currentPP - action.amount);\n          break;\n        case 'restore':\n          newPP = Math.min(maxPP, currentPP + action.amount);\n          break;\n        case 'set':\n          newPP = Math.min(maxPP, Math.max(0, action.amount));\n          break;\n        default:\n          continue;\n      }\n      \n      await token.actor.update({\n        'system.powerPoints.value': newPP\n      });\n      \n      console.log(`✅ ${token.actor.name}: PP ${currentPP} → ${newPP}`);\n      processedCount++;\n      \n      // Visual feedback\n      const color = action.action === 'spend' ? '#FF6600' : '#0099FF';\n      const prefix = action.action === 'spend' ? '-' : '+';\n      const displayAmount = action.action === 'set' ? newPP : action.amount;\n      \n      canvas.interface.createScrollingText(token.center, `${action.action === 'set' ? '' : prefix}${displayAmount} PP`, {\n        anchor: CONST.TEXT_ANCHOR_POINTS.CENTER,\n        direction: CONST.TEXT_ANCHOR_POINTS.TOP,\n        distance: 2 * token.h,\n        fontSize: 24,\n        fill: color,\n        stroke: '#000000',\n        strokeThickness: 3,\n        jitter: 0.1\n      });\n      \n    } catch (error) {\n      console.error(`❌ Failed to update power points for ${token.actor.name}:`, error);\n    }\n  }\n}\n\nui.notifications.info(`Power points updated for ${processedCount} token(s)!`);",
  "img": "icons/svg/lightning.svg",
  "folder": null,
  "sort": 900,
  "flags": {
    "avant": {
      "description": "Manage power points for selected tokens (spend, restore, or set)",
      "version": "1.0.0",
      "category": "utility"
    }
  },
  "_id": "syfsIxrkiOnPbI62",
  "category": "utility",
  "system": {
    "description": "Manage power points for selected tokens (spend, restore, or set)",
    "version": "1.0.0",
    "category": "utility"
  }
}